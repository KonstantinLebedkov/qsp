#include "qsp_world.h"

qsp_world& qsp_world::WorldHandler()
{
    static qsp_world theHandler;
    return theHandler;
}

int qsp_world::LocsCount()
{
    return Locs.size();
}

void qsp_world::CreateWorld(int start, int locsCount)
{//TODO: второй аргумент, локс-каунт, пока оставлен совместимости ради, но! он же не нужен, у нас динамическая структура теперь. удалить на очережном проходе редизайна.
    int i, j;
    Locs.ClearTail(start);
    LocsNames.ClearTail(start);
    //мне по прежнему не внятно, занафигом это (Locs, LocsNames) в разных конструкциях.
    /* нижевырезанное нафиг не нужно, ибо предварительно набивает память пустышками - а память эта может и не нужна будет вообще.
    for (i = start; i < qspLocsCount; ++i)
    { //и здесь набивка свежевыделенных в памяти переменных типа "локация" и "имя локи" минимальными данными. 
        //а именно - пустая строка в "имя локи" и пустые строки в массив акшенов каждой локи. и при том(!!!) пустышками набивается весь массив акшенов. он немаленький так то. а реально заюзаных там гораздо меньше, не особо представляю локу где были бы заюзаны все 50 акшенов. так что здесь переход к векторам будет выгодным.
        //короче говоря, мы люди современные, у нас есть динамические массивы - нам нафиг не нада забивать это пустышками. потому что это надо выделить, а оно еще и не понадобится в большинстве случаев, хотя выделено было. 
        qspLocsNames[i].Name = qspNullString;
        for (j = 0; j < QSP_MAXACTIONS; ++j)
            qspLocs[i].Actions[j].Desc = qspNullString;
    }
    */
}

void qsp_world::PrepareLocs()
{
    int i;
    for (i = 0; i < Locs.size(); ++i)
    {//по числу локаций,
        LocsNames.at(i).Index = i;
        //в лок-неймс пишем номер (вот точно, это могёт быть итератор на локу в векторе локаций
        LocsNames[i].Name.assign(Locs.at(i).Name);
        //приводит имя в массиве указателей в соответствие с именем в массиве локаций
        LocsNames[i].Name.UpperString();
        //и капсит его в указателях
    }
    //после чего указатели сортируются по имени.
    LocsNames.Sort();
}
